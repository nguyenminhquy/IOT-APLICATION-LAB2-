#include <Arduino.h>
#include <Wire.h>
#include "DHT20.h"
#include <WiFi.h>             // Th∆∞ vi·ªán WiFi cho ESP32
#include <PubSubClient.h>     // Th∆∞ vi·ªán MQTT
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>

// Task handles
TaskHandle_t Task1Handle = NULL;
TaskHandle_t Task2Handle = NULL;
TaskHandle_t Task3Handle = NULL;

// DHT20 Sensor
DHT20 DHT;

// C·∫•u h√¨nh WiFi v√† ThingsBoard (CoreIoT)
constexpr char WIFI_SSID[] = "ACLAB";
constexpr char WIFI_PASSWORD[] = "ACLAB2023";
constexpr char TOKEN[] = "su90rvop2rvzxlxixpxg";
constexpr char THINGSBOARD_SERVER[] = "app.coreiot.io";
constexpr uint16_t THINGSBOARD_PORT = 1883U;

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

// ƒê·ªãnh nghƒ©a ch√¢n I2C
#define I2C_SDA 21
#define I2C_SCL 22

// H√†m k·∫øt n·ªëi l·∫°i MQTT khi m·∫•t k·∫øt n·ªëi
void reconnectMQTT() {
  while (!mqttClient.connected()) {
    Serial.print("K·∫øt n·ªëi MQTT...");
    if (mqttClient.connect("ArduinoClient", TOKEN, NULL)) {
      Serial.println("K·∫øt n·ªëi th√†nh c√¥ng!");
      mqttClient.subscribe("v1/devices/me/rpc/request/+");  // ƒêƒÉng k√Ω l·∫Øng nghe RPC
    } else {
      Serial.print("L·ªói k·∫øt n·ªëi, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" - Th·ª≠ l·∫°i sau 5 gi√¢y");
      delay(5000);
    }
  }
}


void Task1(void *pvParameters) {
  while (1) {
    Serial.println("Hello from Task1");
    vTaskDelay(pdMS_TO_TICKS(1000));
  }
}


void Task2(void *pvParameters) {
  while (1) {
    Serial.println("Hello from Task2");
    vTaskDelay(pdMS_TO_TICKS(1500));
  }
}


void Task3(void *pvParameters) {
  while (1) {
    if (!mqttClient.connected()) {
      reconnectMQTT();
    }
    mqttClient.loop();

    if (millis() - DHT.lastRead() >= 5000) {  // ƒê·ªçc m·ªói 5 gi√¢y
      int status = DHT.read();
      float temperature = DHT.getTemperature();
      float humidity = DHT.getHumidity();

      Serial.print("DHT20 Temperature: ");
      Serial.print(temperature, 1);
      Serial.println(" ¬∞C");

      Serial.print("DHT20 Humidity: ");
      Serial.print(humidity, 1);
      Serial.println(" %");

    
      char payload[100];
      snprintf(payload, sizeof(payload), "{\"temperature\": %.1f, \"humidity\": %.1f}", temperature, humidity);

      // G·ª≠i d·ªØ li·ªáu l√™n CoreIoT
      if (mqttClient.publish("v1/devices/me/telemetry", payload)) {
        Serial.println("G·ª≠i d·ªØ li·ªáu th√†nh c√¥ng.");
      } else {
        Serial.println("G·ª≠i d·ªØ li·ªáu th·∫•t b·∫°i.");
      }

      Serial.print("Status: ");
      switch (status) {
        case DHT20_OK: Serial.println("OK"); break;
        case DHT20_ERROR_CHECKSUM: Serial.println("Checksum error"); break;
        case DHT20_ERROR_CONNECT: Serial.println("Connect error"); break;
        case DHT20_MISSING_BYTES: Serial.println("Missing bytes"); break;
        case DHT20_ERROR_BYTES_ALL_ZERO: Serial.println("All bytes read zero"); break;
        case DHT20_ERROR_READ_TIMEOUT: Serial.println("Read time out"); break;
        case DHT20_ERROR_LASTREAD: Serial.println("Read too fast"); break;
        default: Serial.println("Unknown error"); break;
      }
      Serial.println();
    }
    vTaskDelay(pdMS_TO_TICKS(5000));
  }
}

void rpcCallback(char* topic, byte* payload, unsigned int length) {
  Serial.println("üì© Nh·∫≠n y√™u c·∫ßu RPC t·ª´ CoreIoT!");

  // ƒê·ªçc d·ªØ li·ªáu t·ª´ c·∫£m bi·∫øn ngay l·∫≠p t·ª©c
  int status = DHT.read();
  float temperature = DHT.getTemperature();
  float humidity = DHT.getHumidity();


  char response[100];
  snprintf(response, sizeof(response), "{\"temperature\": %.1f, \"humidity\": %.1f}", temperature, humidity);

  // G·ª≠i ph·∫£n h·ªìi v·ªÅ CoreIoT
  mqttClient.publish("v1/devices/me/rpc/response/1", response);
  Serial.println(" ƒê√£ g·ª≠i ph·∫£n h·ªìi RPC!");
}


void setup() {
  Serial.begin(115200);
  Wire.begin(I2C_SDA, I2C_SCL);

  // K·∫øt n·ªëi WiFi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("ƒêang k·∫øt n·ªëi WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi ƒë√£ k·∫øt n·ªëi!");

  mqttClient.setServer(THINGSBOARD_SERVER, THINGSBOARD_PORT);
  mqttClient.setCallback(rpcCallback); 
  // K·∫øt n·ªëi MQTT
  reconnectMQTT();


  if (!DHT.begin()) {
    Serial.println(" Kh·ªüi t·∫°o c·∫£m bi·∫øn DHT20 th·∫•t b·∫°i!");
    while (1);
  }
  Serial.println(" C·∫£m bi·∫øn DHT20 ƒë√£ kh·ªüi t·∫°o.");

  // T·∫°o c√°c task FreeRTOS
  xTaskCreate(Task1, "Task1", 1000, NULL, 1, &Task1Handle);
  xTaskCreate(Task2, "Task2", 1000, NULL, 1, &Task2Handle);
  xTaskCreate(Task3, "DHT20Task", 3000, NULL, 1, &Task3Handle);
}


void loop() {
  mqttClient.loop(); 
}
